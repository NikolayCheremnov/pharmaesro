// Code generated by "enumer -trimprefix=LogLevel -type=LogLevel -json -output log_level_enum.go"; DO NOT EDIT.

package logger

import (
	"encoding/json"
	"fmt"
)

const _LogLevelName = "UnknownInfoDebugWarningError"

var _LogLevelIndex = [...]uint8{0, 7, 11, 16, 23, 28}

func (i LogLevel) String() string {
	if i < 0 || i >= LogLevel(len(_LogLevelIndex)-1) {
		return fmt.Sprintf("LogLevel(%d)", i)
	}
	return _LogLevelName[_LogLevelIndex[i]:_LogLevelIndex[i+1]]
}

var _LogLevelValues = []LogLevel{0, 1, 2, 3, 4}

var _LogLevelNameToValueMap = map[string]LogLevel{
	_LogLevelName[0:7]:   0,
	_LogLevelName[7:11]:  1,
	_LogLevelName[11:16]: 2,
	_LogLevelName[16:23]: 3,
	_LogLevelName[23:28]: 4,
}

// LogLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LogLevelString(s string) (LogLevel, error) {
	if val, ok := _LogLevelNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LogLevel values", s)
}

// LogLevelValues returns all values of the enum
func LogLevelValues() []LogLevel {
	return _LogLevelValues
}

// IsALogLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LogLevel) IsALogLevel() bool {
	for _, v := range _LogLevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LogLevel
func (i LogLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LogLevel
func (i *LogLevel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LogLevel should be a string, got %s", data)
	}

	var err error
	*i, err = LogLevelString(s)
	return err
}
